
package x73.p20601;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1Sequence ( name = "ConfigObject", isSet = false )
    public class ConfigObject implements IASN1PreparedElement {
            
        @ASN1Element ( name = "obj-class", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private OID_Type obj_class = null;
                
  
        @ASN1Element ( name = "obj-handle", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private HANDLE obj_handle = null;
                
  
        @ASN1Element ( name = "attributes", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private AttributeList attributes = null;
                
  
        
        public OID_Type getObj_class () {
            return this.obj_class;
        }

        

        public void setObj_class (OID_Type value) {
            this.obj_class = value;
        }
        
  
        
        public HANDLE getObj_handle () {
            return this.obj_handle;
        }

        

        public void setObj_handle (HANDLE value) {
            this.obj_handle = value;
        }
        
  
        
        public AttributeList getAttributes () {
            return this.attributes;
        }

        

        public void setAttributes (AttributeList value) {
            this.attributes = value;
        }
        
  
                    
        
        public void initWithDefaults() {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(ConfigObject.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            